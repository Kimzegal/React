





리액트 왜쓰는가?
SPA
물론 쌩 자바스크립트로도 가능

html 재사용 편리
비슷한 문법으로 모바일 앱 개발 가능(react native)

개발환경 1.node.js
(cmd에서 node -v로 확인)
2. vscode
3. powershell : npx create-react-app 이름

npx는 global npm과 비슷한데,
필요한 패키지를 최신버전으로 설치하여 실행한 후 바로 제거함
(이럴경우, 각각의 프로젝트를 필요한 패키지의 특정 버전을 사용할 수 있음)
create react app은 일종의 라이브러리로 한번에 리액트 전용 프로젝트 파일 생성
허가되지않는 스크립트..
Set-ExecutionPolicy 입력
맥북은sudo
npm start

node_modules : 라이브러리코드보관함
public: static파일 모아놓는곳
src : 코드(source code)
src의 App.js가 메인, 여기 짜여진 html코드는 src의index.html로!
package.json : 프로젝트 정보


병렬로 2개이상금지
state 역시 자료르르 담는다
import { useState} from 'react'};
useState(...) << ... 를 저장한다.
나중엔 변수에 대입해서 쓰면됨
let [a,b] = useState -> 이건 배열 구조 분해 할당(destructuring assignment)
let a = 변수명[0].. 이런거랑 똑같음 신택스 슈거
useState 훅은 배열을 반환하는데, 이 배열엔 현재  상태값과 이 상태를 설정하는  함수
따라서 초기값은 "ㅎㅇ", 이 ㅅ아태의 현재값을 a, 상태업데이트 함수를 b에 할당

state와 변수의 차이 
변수는 중간에 바뀌면, 다시 출력도 바뀔수 있도록 코드를 짜야함
그에 반해 state는 자동으로 재 렌더링됨

Warning 은 경고이다.
/*eslint-disable */  를 맨 위에 붙이면  무시할 수 있다.
onClick={ 함수명 }
괄호안에서 { function(){ 실행코드} } 나 {  () => {실행코드}} 가능
state변경을위해서 { () => {state = state+1} }쓰면 적용 안됨
이거때문에 구조분해 할당해서
두번째의 변경함수를 쓴다. 변경함수(변경내역)

state가 array일경우 변경함수 내부에는 array 전체(object도 마찬가지)를 넣어야함
아니라면 array값을 가져와서 array[0] = 변경값
이런식으로 해두고, 변경함수(array)를 써도된다.
그러나 보통 array, object는 원본을 보존하기 때문에,
let copy = [...array]
state함수는 기존의 state와 신규state를 비교하여 변겅한다. 
즉 변경이 되지 않으면, 재 렌더링을 하지않는다.
reference 타입이므로,spread operator을 사용한다.
array나 object 왼쪽에 붙여서 괄호를 벗겨주세요~ 란 뜻인데
[...array]하면 deep copy


컴포넌트 문법 
1. function 만들고
2. return() 안에 html 담기
3.<함수명> </함수명>
fragment 문법 : function내의 의미없는 바깥태그를 <></>으로 표시가능
반복적인 html 축약할때 컴포넌트 아주 좋ㅇㅁ
큰 페이지 역시 컴포넌트로 만들어 쓰면 좋음
자주 변경되는 것들도 컴포넌트로!
단점 : 타 컴포넌트의 state를 가져다 쓸 수 없음
const Modal = () => {}
*실수 방지

동적 UI
. html css로 미리 디자인 완료
2. UI의 현재 상태를 sate로 저장
3. state에 따라 UI가 어떻게 보일지 작성
중간에조건문 쓰려면 중괄호 안에 3항연산자

반복문을 통해 같은 html을 반복생성
ㅡmap 함수 : array의 자료 갯수만큼 함수안의 콜백함수를 반복
[1,2,3].map(function(){});
콜백함수에 parameter를 넣을 경우, array 내부의 자료임
두개까지 가능하며, 두번째에는 index값
return을할 경우 array에담아줌
map반복문으로 반복 생성된 html에는 key={i}를추가해준다.
왜냐하면, 각 div를 리액트가 구분할 수잇음
return밖에서 for문써서 특정  변수에 array를 저장해 ㄴ놓고
{array}로 출력해도 됨.
왜냐하면, 리액트는 그냥 이런 array들도알아서 잘 출력하기 때문

App 컴포넌트 안에 Modal컴포넌트가 있으므로, 부모, 자식
부모컴퓨터에서 자식 컴포넌트로 state를 전송할수 있음. 이를 props
1. <자식컴포넌트 작명={state이름}> 작명 여러개로 한번에 전달할 수 있음
style={{background : prps.color}로 해놓고 위에서 color 전달하면 됨
2. function(props)로 받아서 이용. 사ㅣㄹ 작명은 자유

react는 반드시 여는태그오 ㅏ닫는태그다잇어야함(input)
onChange를 쓰면 input에 뭔가 입력시 코드를 실행
onInput도 있음
onMouseOver, onScroll...
input입력을 가져오려면? 보통은 내부콜백함수를 사용
e(event)를 인수로 가지며, e.target.value 면 값가져옴
state변경 함수는 비동기 처리이므로 조금 늦게 처리될 숭 ㅣㅅ음

예전에는class로 썼음

버를 만들줄 아는 똑똑이라면  

리액트는 이쁜 HTML파일 만들어주는 툴이기 때문에  

리액트로 열심히 프로젝트 만들고 npm run build 입력하면 build/index.html 파일이 생성됩니다.

그리고 "어떤 놈이 메인페이지로 접속하면 /build/index.html 파일 전송해라"

라고 서버 API를 작성하면 간단한 배포가 끝납니다. 

(주의) build 폴더를 드래그 앤 드롭하는게 아닙니다. build 폴더 안의 내용물이요.

드래그 앤 드롭하시고 초록버튼까지 눌러주면 배포 끝입니다. 

실수했다면 repository 과감하게 삭제하고 다시 만들면 됩니다. 

 

이제 10분 정도 후에 https://여러분아이디.github.io 라고 주소창에 입력하면 여러분의 사이트가 보입니다.

이제 집가서 부모님께 자랑합시다. 

 

 

 

 

 

(흔한 github pages 에러) 왜 사이트 주소로 접속했는데 404 페이지가 뜨죠?

- 10분 더 기다려보십시오.

- ctrl + shift + r 을 이용해 새로고침 해보십시오.

- 혹은 repository 생성하실 때 님들아이디.github.io가 아니라 뭔가 잘못적은겁니다. 

정확히 안적었으면 그냥 다시 하나 새로 만듭시다. 

 

 

 

 

(추가) github이 좋아졌습니다.

 

이제 여러 repository를 동시에 호스팅해준다고합니다. 다른 HTML 페이지도 호스팅받고 싶으면

 

0. 위에서 만든 내이름.github.io 라는 repository 잘 있죠? 그거 지우면 안됩니다.

 

1. 남에게 자랑하고픈 새로운 프로젝트를 올릴 repository를 새로 만들어줍니다. 이름은 아무렇게나 하시면 됩니다.

 

2. 그 repository에 아까처럼 드래그앤드롭으로 원하는 HTML CSS JS 파일을 업로드하고 확인까지 누릅니다.

 

3. repository setting 메뉴에 들어가서 Github pages 부분을 찾습니다.

 



 

▲4. 저기 source 부분을 None이 아니라 main 이런걸로 바꿔주고 저장하셈

 

5. 그럼 끝입니다. 이제 님아이디.github.io/repository이름/ 으로 들어가시면 아까 업로드했던 HTML파일을 볼 수 있습니다.

안보이면

님아이디.github.io/repository이름/html파일명.html

이렇게 직접 들어가봅시다. 그리고 첫 업로드 후엔 보통 10~20분넘게 기다려야 반영됩니다.

 

 

 

 

 

Q1. 첫 페이지 로딩 속도를 빠르게 하려면

원래 리액트, 뷰로 만든 웹앱들은 첫 방문시 필요한 파일을 전부 로드합니다.

전송되는 파일 사이즈를 조금이라도 줄여서 빠르게 만들고 싶으면 컴포넌트들을 lazy하게 로딩하는 방법을 사용할 수도 있습니다.

공식 튜토리얼에 있는 lazy 함수 : https://reactjs.org/docs/code-splitting.html#route-based-code-splitting

 

 

Q2. 업데이트 사항이 생기면 배포 또 어떻게하죠?

build 또 하시고 그 파일 그대로 다시 업로드하면 됩니다.

build 할 때 마다 CSS, JS 파일 명이 무작위로 다시 생성됩니다.

그래서 새로 배포할 때마다 사이트 방문자들은 새로운 CSS,JS 파일을 이용할 수 있습니다. 

 

 

Q3. build 할 때 압축 시키지말고 남기고 싶은 파일은?

여러분이 ./ 부터 시작하는 경로로 첨부한 이미지, js 파일들은 전부 짜부되고 이름이 변합니다.

이름이 변하지 않게 하고 싶으면 public 폴더안에 넣고 build 해보십시오.

그럼 build 하고 나서도 그대로 루트경로에 파일이 남아있습니다.

(개발시 그런 파일들을 이용하고 싶으면 public 폴더에 보관하고 ./ 이게 아닌 / 경로로 import 해오면 됩니다)

 

 

Q4. 서버에 올렸는데 왜 접속하면 이상한 페이지가 나오거나 일부 img, css파일이 로드가 안되는 것이죠?

대부분 경로 문제입니다. 

- build 할 때 에러 안났겠죠 

- 혹시 하위폴더에 배포한거 아닙니까

- 배포한 페이지가 안나오면 크롬개발자도구 열어서 index.html이 쓰고있는 css, js, img 파일들의 경로가 제대로 되어있는지 체크해보도록 합시다. 

 

 

 

Q5. 메인페이지 말고 왜 특정 페이지로 접속하면 404 에러가 뜨나요?

어쩌구.github.io/detail/1 이렇게 세부 페이지 URL을 주소창에 직접 입력하시면

찾는 페이지가 없어요~ 이렇게 404 에러가 날 수 있습니다.

이건 서버에서 "누군가 어쩌구.github.io/어쩌구 로 접속하면 메인페이지로 안내하세요~" 라고 API 개발을 해놔야합니다.

 

근데 github은 우리가 서버를 만지고 어찌할 수 있는게 아니고 그냥 HTML 파일 올린것만 샤락 보여주는 곳이기 때문에

사이트 메뉴에다가 페이지 이동버튼을 잘 만들어두시면 되겠습니다.


react bootstrap

아니면 URL에 #기호가 붙는 hashRouter를 리액트 라우터 코드짤 때 쓰든가요






 





SHOP

Bootstrap 라이브러리
yarn add react-bootstrap bootstrap
npm install react-bootstrap bootstrap

import 'bootstrap/dist/css/bootstrap.min.css';
import { Button, Nav, Navbar, Container} from 'react-bootstrap';
만약 inline style로 이미지를 넣을경우, 'url()'의 괄호안에는 
import 작명 from '경로'
style={{backgroundImage: 'url('+bg+')}}
(함수는 못전달함)

경로를 폴더로 쓸경우엔 import 해와야하지만,
public 폴더에 이미지 보관(압축안됨)
경로는 슬래시부터 시작되나, url에 따라 변동 가능성이 있을경우
process.env.PUBLIC_URL + '/파일명'

import,export
data.js에서 export default 변수명;
App.js에서 import 작명 from './data.js';
하면 data.js의 변수를 쓸 수 있음

여러변수의 경우 export {변수1, 변수2}
import {변수1, 변수2} from './data.js'; -> 변수명 그대로 써야함


리액트로 페이지 나누는법
컴포넌트 만들어서 상세페이지 내용 채움
누가 /detail 접속하면 그 컴포넌트를 보여줌
react-router-dom 라이브러리 쓰면 가능
yarn add react-router-dom
index.js에 import { BrowserRouter } from "react-router-dom";
<App />을 <BrowserRouter>로 감ㅅ쌈


app.js
import { Routes, Route, Link } from 'react-router-dom'
Route 는 페이지 갯수
 <Route path="/detail" element={<div>상세페이지임</div>} />
path가 / 이면 메인페이지
<Link to="/"> -->> 링크를 이용하는것
path="*" : 외의 모든 URL


useNavigate();
훅중 하나
페이지이동으로, Link대신 사용가능
<Nav.Link
              onClick={() => {
                navigate("/");
              }}
            > 
인수가 1, -1이면 앞으로가기 뒤로가기

Nested Route
Router 안에 넣음
<Route path="/about" element={<About />}>
          <Route path="member" element={<div>멤12321321버요</div>} />
          <Route path="remember" element={<div>멤버요</div>} />
        </Route>

Nested된 Route의 요소는 부모 Route 요소 내의
<Outlet /> 에 표시된다 (없으면 안표시됨)
function About() {
  return (
    <div>
      <h4>회사정보</h4>
      <Outlet />
    </div>
  );
}
여러 유사한 페이지가 필요할때 사용하면 좋음

URL page


